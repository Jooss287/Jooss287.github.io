<feed xmlns="http://www.w3.org/2005/Atom"> <id>https://jooss287.github.io/</id><title>Jooss's HardDisk</title><subtitle>A minimal, portfolio, sidebar, bootstrap Jekyll theme with responsive web design and focuses on text presentation.</subtitle> <updated>2021-07-28T17:42:13+09:00</updated> <author> <name>SeongsooJoo</name> <uri>https://jooss287.github.io/</uri> </author><link rel="self" type="application/atom+xml" href="https://jooss287.github.io/feed.xml"/><link rel="alternate" type="text/html" hreflang="en-US" href="https://jooss287.github.io/"/> <generator uri="https://jekyllrb.com/" version="4.2.0">Jekyll</generator> <rights> © 2021 SeongsooJoo </rights> <icon>/assets/img/favicons/favicon.ico</icon> <logo>/assets/img/favicons/favicon-96x96.png</logo> <entry><title>Google Test Link Error(LNK2019) 해결방법</title><link href="https://jooss287.github.io/posts/GTestLinkIssue/" rel="alternate" type="text/html" title="Google Test Link Error(LNK2019) 해결방법" /><published>2021-07-28T17:00:00+09:00</published> <updated>2021-07-28T17:41:41+09:00</updated> <id>https://jooss287.github.io/posts/GTestLinkIssue/</id> <content src="https://jooss287.github.io/posts/GTestLinkIssue/" /> <author> <name>SeongsooJoo</name> </author> <category term="Language" /> <category term="Cpp" /> <summary> Visual studio 2017부터 Google test가 IDE에서 정식 지원합니다. 이전 포스트한 Google test 설치하기는 VS 이외의 IDE에서 사용하면 되겠습니다. Link 2019 Error 발생 배경 C++에서의 Gtest는 일반적으로 같은 Solution안의 별개의 Project에서 작업을 진행합니다. 아래와 같이 프로젝트를 구성하고 Test case를 작성하였습니다. Foo solution dir ㄴ Foo ㄴ Foo.h ㄴ Foo.cpp ㄴ FooTest ㄴ FooTest.cpp # Foo project # Foo.h class Foo { Foo() {}; int makeSomething(); } ... </summary> </entry> <entry><title>Java와 C++의 class 차이점 정리</title><link href="https://jooss287.github.io/posts/Java_Cpp_class/" rel="alternate" type="text/html" title="Java와 C++의 class 차이점 정리" /><published>2021-05-03T23:05:00+09:00</published> <updated>2021-05-03T23:05:00+09:00</updated> <id>https://jooss287.github.io/posts/Java_Cpp_class/</id> <content src="https://jooss287.github.io/posts/Java_Cpp_class/" /> <author> <name>SeongsooJoo</name> </author> <category term="Language" /> <category term="Java" /> <summary> Class에 관해 Java와 C++의 차이점을 간단하게 표로 정리하면 아래와 같습니다. Language C++ Java 상속 관계 public, private, protected extends, implement Virtual method 필요시 명시 Default 조부모 class 접근 연산자를 통해 가능 부모 class를 통해서만 가능 extends Extend는 부모 class의 내용을 자식 클래스에게 상속하는 기본 상속 방법입니다. public class Car ... </summary> </entry> <entry><title>코드의 수행시간 체크하기</title><link href="https://jooss287.github.io/posts/cpp_time_check_funcs/" rel="alternate" type="text/html" title="코드의 수행시간 체크하기" /><published>2021-04-16T17:04:00+09:00</published> <updated>2021-04-28T18:00:52+09:00</updated> <id>https://jooss287.github.io/posts/cpp_time_check_funcs/</id> <content src="https://jooss287.github.io/posts/cpp_time_check_funcs/" /> <author> <name>SeongsooJoo</name> </author> <category term="Language" /> <category term="Cpp" /> <summary> C++ 작업을 진행하다 보면 내가 만든 코드의 수행시간이 얼마나 될지 체크해야하는 경우가 생깁니다. 프로그램이 더 빨리 혹은 긴밀하게 연계되어 돌아가는 코드에서는 더욱더 이러한 수행시간을 체크하는것이 중요해집니다. Windows OS에는 다양한 Time Check 방법들이 존재합니다. clock_t GetTickCount() timeGetTime() chrono::system_clock::now() QueryPerformenceCounter 하나하나 정리하며 추가로 알게 된 정보에 대해서는 아래에 더 추가하도록 하겠습니다. 기본적으로 모든 함수들을 0.1ms, 5ms, 20ms, 100ms, 1000ms 다섯가지 방법으로 10번 반복하여 정리하도록 하겠습니다. 코드의 수행시... </summary> </entry> <entry><title>Git commit의 Author 변경하기</title><link href="https://jooss287.github.io/posts/Edit_commit_author/" rel="alternate" type="text/html" title="Git commit의 Author 변경하기" /><published>2020-09-07T18:30:00+09:00</published> <updated>2021-04-28T18:00:52+09:00</updated> <id>https://jooss287.github.io/posts/Edit_commit_author/</id> <content src="https://jooss287.github.io/posts/Edit_commit_author/" /> <author> <name>SeongsooJoo</name> </author> <category term="Git" /> <summary> 우리는 깃허브, 깃랩 등을 이용하여 깃을 사용하곤 합니다. commit, pull request 등 여러 기능을 사용하면서 깃허브에서 잔디밭을 채우는데 희열(?)을 느끼며 개발을 하는 것 같기도 합니다. 제 깃허브 페이지에서 주말 잔디밭이 항상 비어있는 것을 보고 뭔가 이상하다고 생각하던 중, 집 컴퓨터에서 사용하는 SourceTree에 메일이 잘못 설정되어 있는것을 발견하였습니다. Git의 Rebase를 사용하여 잘못 정해진 Author를 수정 해 보겠습니다. 준비물 먼저, 공용 Repository 에는 Rebase작업을 하면 안 됩니다. Git 홈페이지에는 Rebase는 Commit hash의 값을 바꾸게 되니 다른사람의 작업 내용이 꼬일 수 있다고 경고합니다. 또한 저는 작업하려고 빼두... </summary> </entry> <entry><title>드라이버 디버깅 세팅하기</title><link href="https://jooss287.github.io/posts/WinDbg_How_to_use/" rel="alternate" type="text/html" title="드라이버 디버깅 세팅하기" /><published>2020-09-04T18:30:00+09:00</published> <updated>2021-07-28T17:41:41+09:00</updated> <id>https://jooss287.github.io/posts/WinDbg_How_to_use/</id> <content src="https://jooss287.github.io/posts/WinDbg_How_to_use/" /> <author> <name>SeongsooJoo</name> </author> <category term="Language" /> <category term="C" /> <summary> 드라이버를 만들어서 설치를 하게 되면 다양한 문제에 봉착합니다. 바로 잘 만들어지면 최고의 결과겠지만 초보자의 단계에선 절대 그럴 수 없는듯 합니다. WDK를 설치하면 같이 설치되는 WinDbg가 이미 드라이버 설치를 끝난 단계에서만 사용 가능한줄 알았으나 연결 해 놓으면 드라이버 설치 시에 생기는 문제도 알려 줍니다. 기본적으로 드라이버 개발 시에는 개발을 진행하는 PC에서 테스트를 하는 것이 아닌 원격 PC를 이용하여 아무것도 설치되지 않은 PC를 이용하여 진행합니다. 드라이버를 설치 할 PC를 원격 PC로, 개발을 진행하는 PC를 개발PC로 명명하고 진행하겠습니다. 원격 PC 설정 원격 PC에서 개발PC의 접근권한을 허용하기 위해 Command 창을 관리자 권한으로 열어줍니다. 윈... </summary> </entry> </feed>
